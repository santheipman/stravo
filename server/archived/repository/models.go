// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type Userrole string

const (
	UserroleAdmin Userrole = "admin"
	UserroleUser  Userrole = "user"
	UserroleRoot  Userrole = "root"
)

func (e *Userrole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Userrole(s)
	case string:
		*e = Userrole(s)
	default:
		return fmt.Errorf("unsupported scan type for Userrole: %T", src)
	}
	return nil
}

type NullUserrole struct {
	Userrole Userrole
	Valid    bool // Valid is true if Userrole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserrole) Scan(value interface{}) error {
	if value == nil {
		ns.Userrole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Userrole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserrole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Userrole), nil
}

type User struct {
	ID             uuid.UUID
	Email          sql.NullString
	Hashedpassword sql.NullString
	Role           NullUserrole
}
